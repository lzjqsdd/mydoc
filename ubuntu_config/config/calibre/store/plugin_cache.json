{
  "nexto": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass NextoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        pid = '155711'\n\n        url = 'http://www.nexto.pl/ebooki_c1015.xml'\n        detail_url = None\n\n        if detail_item:\n            book_id = re.search(r'p[0-9]*\\.xml\\Z', detail_item)\n            book_id = book_id.group(0).replace('.xml','').replace('p','')\n            if book_id:\n                detail_url = 'http://www.nexto.pl/rf/pr?p=' + book_id + '&pid=' + pid\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.nexto.pl/szukaj.xml?search-clause=' + urllib.quote_plus(query) + '&scid=1015'\n\n        br = browser()\n        offset=0\n\n        counter = max_results\n\n        while counter:\n            with closing(br.open(url + '&_offset=' + str(offset), timeout=timeout)) as f:\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//ul[@class=\"productslist\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"col-2\"]/a/@href'))\n                    if not id:\n                        continue\n\n                    price = ''.join(data.xpath('.//strong[@class=\"nprice\"]/text()'))\n\n                    cover_url = ''.join(data.xpath('.//img[@class=\"cover\"]/@src'))\n                    cover_url = re.sub(r'%2F', '/', cover_url)\n                    cover_url = re.sub(r'widthMax=120&heightMax=200', 'widthMax=64&heightMax=64', cover_url)\n                    title = ''.join(data.xpath('.//a[@class=\"title\"]/text()'))\n                    title = re.sub(r' \u2013 ebook', '', title)\n                    author = ', '.join(data.xpath('.//div[@class=\"col-7\"]//h4//a/text()'))\n                    formats = ', '.join(data.xpath('.//ul[@class=\"formats\"]/li//b/text()'))\n                    DrmFree = re.search(r'znak', str(data.xpath('.//ul[@class=\"formats\"]/li//b/@title')))\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = cover_url if cover_url[:4] == 'http' else 'http://www.nexto.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author.strip()\n                    s.price = price.strip()\n                    s.detail_item = id.strip()\n                    s.drm = SearchResult.DRM_UNLOCKED if DrmFree else SearchResult.DRM_LOCKED\n                    s.formats = formats.upper().strip()\n\n                    yield s\n                if not doc.xpath('//div[@class=\"listnavigator\"]//a[@class=\"next\"]'):\n                    break\n            offset+=10\n", 
  "ebookshoppe_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + urllib2.quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n", 
  "amazon_uk": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.co.uk/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'http://amazon.co.uk/dp/'\nSTORE_LINK =  'http://www.amazon.co.uk'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"Kindle Edition\")]//text()'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_ca": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 4  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.ca/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'http://amazon.ca/dp/'\nSTORE_LINK =  'http://www.amazon.ca'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_in": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.in/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'http://amazon.in/dp/'\nSTORE_LINK =  'http://www.amazon.in'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            if s.price:\n                s.price = '\u20b9 ' + s.price\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "legimi": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 8  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass LegimiStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/9/58/'\n\n        url = 'http://www.legimi.com/pl/ebooki/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.legimi.com/pl/ebooki/?szukaj=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"listBooks\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[1]/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//span[@class=\"listImage imageDarkLoader\"]/img/@src'))\n                title = ''.join(data.xpath('.//span[@class=\"bookListTitle ellipsis\"]/text()'))\n                author = ''.join(data.xpath('.//span[@class=\"bookListAuthor ellipsis\"]/text()'))\n                price = ''.join(data.xpath('.//div[@class=\"bookListPrice\"]/span/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.detail_item = 'http://www.legimi.com/' + id.strip()\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        drm_pattern = re.compile(\"zabezpieczona DRM\")\n        formats = []\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            formatlist = idata.xpath('.//div[@class=\"bookFormatsBox clearfix\"]//span[@class=\"bookFormat\"]/text()')\n            for x in formatlist:\n                if x.strip() not in formats:\n                    formats.append(x.strip())\n            drm = drm_pattern.search(''.join(idata.xpath('.//div[@id=\"fullBookFormats\"]/p/text()')))\n            search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_LOCKED if drm else SearchResult.DRM_UNLOCKED\n        return True\n", 
  "amazon_de": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.de/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'von'\nKINDLE_EDITION = 'Kindle Edition'\nDETAILS_URL = 'http://amazon.de/dp/'\nSTORE_LINK =  'http://www.amazon.de'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"%s\")]//text()' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "smashwords": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport re\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search(query, max_results=10, timeout=60):\n    url = 'http://www.smashwords.com/books/search?query=' + urllib2.quote(query)\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        doc = html.fromstring(f.read())\n        for data in doc.xpath('//div[@id=\"pageContent\"]//div[@class=\"library-book\"]'):\n            if counter <= 0:\n                break\n            data = html.fromstring(html.tostring(data))\n\n            id = None\n            id_a = ''.join(data.xpath('//a[contains(@class, \"library-title\")]/@href'))\n            if id_a:\n                id = id_a.split('/')[-1]\n            if not id:\n                continue\n\n            cover_url = ''.join(data.xpath('//img[contains(@class, \"book-list-image\")]/@src'))\n\n            title = ''.join(data.xpath('.//a[contains(@class, \"library-title\")]/text()'))\n            author = ''.join(data.xpath('.//a[@itemprop=\"author\"]//text()'))\n\n            price = ''.join(data.xpath('.//div[@class=\"subnote\"]//text()'))\n            if 'Price:' in price:\n                try:\n                    price = price.partition('Price:')[2]\n                    price = re.sub('\\s', ' ', price).strip()\n                    price = price.split(' ')[0].strip()\n                except Exception:\n                    price = 'Unknown'\n            if price == 'Free!':\n                price = '$0.00'\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price\n            s.detail_item = '/books/view/' + id.strip()\n            s.drm = SearchResult.DRM_UNLOCKED\n\n            yield s\n\n\nclass SmashwordsStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.smashwords.com/'\n\n        aff_id = '?ref=usernone'\n        # Use Kovid's affiliate id 30% of the time.\n        if random.randint(1, 10) in (1, 2, 3):\n            aff_id = '?ref=kovidgoyal'\n\n        detail_url = None\n        if detail_item:\n            detail_url = url + detail_item + aff_id\n        url = url + aff_id\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        for a in search(query, max_results=max_results, timeout=timeout):\n            yield a\n\n    def get_details(self, search_result, timeout):\n        url = 'http://www.smashwords.com/'\n\n        br = browser()\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            search_result.formats = ', '.join(list(set(idata.xpath('//p//abbr//text()'))))\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for r in search(sys.argv[-1]):\n        print(r)\n", 
  "ebookpoint": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 8  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EbookpointStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/32/58/'\n\n        url = 'http://ebookpoint.pl/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=25, timeout=60):\n        url = 'http://ebookpoint.pl/search?qa=&szukaj=' + urllib.quote_plus(\n            query.decode('utf-8').encode('iso-8859-2')) + '&serwisyall=0&wprzyg=0&wsprzed=1&wyczerp=0&formaty=em-p'\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"list\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./a/@href'))\n                if not id:\n                    continue\n\n                formats = ', '.join(data.xpath('.//ul[@class=\"book-type book-type-points\"]//span[@class=\"popup\"]/span/text()'))\n                cover_url = ''.join(data.xpath('.//p[@class=\"cover\"]/img/@data-src'))\n                title = ''.join(data.xpath('.//div[@class=\"book-info\"]/h3/a/text()'))\n                author = ''.join(data.xpath('.//p[@class=\"author\"]//text()'))\n                price = ''.join(data.xpath('.//p[@class=\"price price-incart\"]/a/ins/text()|.//p[@class=\"price price-add\"]/a/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub(r'\\.',',',price)\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats.upper()\n\n                yield s\n", 
  "ozon_ru": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom PyQt5.Qt import QUrl\nimport html5lib\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nshop_url = 'http://www.ozon.ru'\n\n\ndef search(query, max_results=15, timeout=60):\n    url = 'http://www.ozon.ru/?context=search&text=%s&store=1,0&group=div_book' % urllib.quote_plus(query)\n\n    counter = max_results\n    br = browser()\n\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = xml_to_unicode(f.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n        root = html5lib.parse(raw, treebuilder='lxml', namespaceHTMLElements=False)\n        for tile in root.xpath('//*[@class=\"bShelfTile inline\"]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            s = SearchResult(store_name='OZON.ru')\n            s.detail_item = shop_url + tile.xpath('descendant::a[@class=\"eShelfTile_Link\"]/@href')[0]\n            s.title = tile.xpath('descendant::span[@class=\"eShelfTile_ItemNameText\"]/@title')[0]\n            s.author = tile.xpath('descendant::span[@class=\"eShelfTile_ItemPerson\"]/@title')[0]\n            s.price = ''.join(tile.xpath('descendant::div[contains(@class, \"eShelfTile_Price\")]/text()'))\n            s.cover_url = 'http:' + tile.xpath('descendant::img/@data-original')[0]\n            s.price = format_price_in_RUR(s.price)\n            yield s\n\n\nclass OzonRUStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = detail_item or shop_url\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            d = WebStoreDialog(self.gui, shop_url, parent, url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=15, timeout=60):\n        for s in search(query, max_results=max_results, timeout=timeout):\n            yield s\n\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 \u0440\u0443\u0431.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    price = price.replace('\\xa0', '').replace(',', '.').strip() + ' py6'\n    return price\n\nif __name__ == '__main__':\n    import sys\n    for r in search(sys.argv[-1]):\n        print(r)\n", 
  "woblink": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 13  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom base64 import b64encode\n\nfrom lxml import html\nfrom mechanize import Request\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import url_slash_cleaner, browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search(query, max_results=10, timeout=60):\n    url = 'http://woblink.com/publication/ajax?mode=none&query=' + urllib.quote_plus(query.encode('utf-8'))\n    if max_results > 10:\n        if max_results > 20:\n            url += '&limit=30'\n        else:\n            url += '&limit=20'\n    br = browser(user_agent='CalibreCrawler/1.0')\n    br.set_handle_gzip(True)\n    rq = Request(url, headers={\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Referrer':'http://woblink.com/ebooki-kategorie',\n        'Cache-Control':'max-age=0',\n    }, data=urllib.urlencode({\n        'nw_filtry_filtr_zakrescen_formularz[min]':'0',\n        'nw_filtry_filtr_zakrescen_formularz[max]':'350',\n    }))\n    r = br.open(rq)\n    raw = r.read()\n    doc = html.fromstring('<html><body>' + raw.decode('utf-8') + '</body></html>')\n    counter = max_results\n\n    for data in doc.xpath('//div[@class=\"nw_katalog_lista_ksiazka ebook \" or @class=\"nw_katalog_lista_ksiazka ebook promocja\"]'):\n        if counter <= 0:\n            break\n\n        id = ''.join(data.xpath('.//div[@class=\"nw_katalog_lista_ksiazka_okladka nw_okladka\"]/a[1]/@href'))\n        if not id:\n            continue\n\n        cover_url = ''.join(data.xpath('.//div[@class=\"nw_katalog_lista_ksiazka_okladka nw_okladka\"]/a[1]/img/@src'))\n        title = ''.join(data.xpath('.//h3[@class=\"nw_katalog_lista_ksiazka_detale_tytul\"]/a[1]/text()'))\n        author = ', '.join(data.xpath('.//p[@class=\"nw_katalog_lista_ksiazka_detale_autor\"]/a/text()'))\n        price = ''.join(data.xpath('.//div[@class=\"nw_opcjezakupu_cena\"]/span[2]/text()'))\n        formats = ', '.join(data.xpath('.//p[@class=\"nw_katalog_lista_ksiazka_detale_format\"]/span/text()'))\n\n        s = SearchResult()\n        s.cover_url = 'http://woblink.com' + cover_url\n        s.title = title.strip()\n        s.author = author.strip()\n        s.price = price + ' z\u0142'\n        s.detail_item = id.strip()\n        s.formats = formats\n\n        counter -= 1\n        s.drm = SearchResult.DRM_LOCKED if 'DRM' in formats else SearchResult.DRM_UNLOCKED\n        yield s\n\n\nclass WoblinkStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/16/58/'\n        url = 'http://woblink.com/publication'\n\n        aff_url = aff_root + str(b64encode(url))\n        detail_url = None\n\n        if detail_item:\n            detail_url = aff_root + str(b64encode('http://woblink.com' + detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        for s in search(query, max_results, timeout):\n            yield s\n\nif __name__ == '__main__':\n    from pprint import pprint\n    pprint(list(search('Franciszek')))\n", 
  "publio": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 6  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass PublioStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        google_analytics = '?utm_source=tdcalibre&utm_medium=calibre'\n        url = 'http://www.publio.pl/' + google_analytics\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner((detail_item + google_analytics) if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item if detail_item else url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=20, timeout=60):\n\n        br = browser()\n\n        counter = max_results\n        page = 1\n        while counter:\n            with closing(br.open('http://www.publio.pl/szukaj,strona' + str(page) + '.html?q=' + urllib.quote(query) + '&sections=EMAGAZINE&sections=MINIBOOK&sections=EBOOK', timeout=timeout)) as f:  # noqa\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//div[@class=\"product-tile\"]'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//a[@class=\"product-tile-cover\"]/@href'))\n                    if not id:\n                        continue\n\n                    cover_url = ''.join(data.xpath('.//img[@class=\"product-tile-cover-photo\"]/@src'))\n                    title = ''.join(data.xpath('.//h3[@class=\"product-tile-title\"]/a/span[1]/text()'))\n                    author = ', '.join(data.xpath('.//span[@class=\"product-tile-author\"]/a/text()'))\n                    price = ''.join(data.xpath('.//div[@class=\"product-tile-price-wrapper \"]/a/ins/text()'))\n                    # formats = ', '.join([x.strip() for x in data.xpath('.//div[@class=\"formats\"]/a/text()')])\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = 'http://www.publio.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author\n                    s.price = price\n                    s.detail_item = 'http://www.publio.pl' + id.strip()\n                    # s.drm = SearchResult.DRM_LOCKED if 'DRM' in formats else SearchResult.DRM_UNLOCKED\n                    # s.formats = formats.replace(' DRM','').strip()\n\n                    yield s\n                if not doc.xpath('boolean(//a[@class=\"next\"])'):\n                    break\n                page+=1\n", 
  "amazon": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.com/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'http://amazon.com/dp/'\nSTORE_LINK =  'http://www.amazon.com/Kindle-eBooks'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"Kindle Edition\")]//text()'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        elif 'grid' in results.get('class', ''):\n            data_xpath = '//div[contains(@class, \"prod\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        elif 'ilresults' in results.get('class', ''):\n            data_xpath = '//li[(@class=\"ilo\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            # Results can be in a grid (table) or a column\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        elif 'list' in results.get('class', ''):\n            data_xpath = '//div[contains(@class, \"prod\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltL\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltL\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_fr": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.fr/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Format Kindle'\nDETAILS_URL = 'http://amazon.fr/dp/'\nSTORE_LINK =  'http://www.amazon.fr'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_au": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.com.au/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'http://amazon.com.au/dp/'\nSTORE_LINK =  'http://www.amazon.com.au'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "virtualo": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 7  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2016, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass VirtualoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/12/58/'\n\n        url = 'http://virtualo.pl/ebook/c2/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=12, timeout=60):\n        url = 'http://virtualo.pl/?q=' + urllib.quote(query)\n\n        br = browser()\n        no_drm_pattern = re.compile(r'Watermark|Brak')\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"content\"]//li[@class=\"product \"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"title\"]//a/@href')).split(r'?q=')[0]\n                if not id:\n                    continue\n\n                price = ''.join(data.xpath('.//div[@class=\"information\"]//div[@class=\"price\"]/text()'))\n                cover_url = ''.join(data.xpath('.//img[@class=\"cover\"]/@src'))\n                title = ''.join(data.xpath('.//div[@class=\"title\"]/a/text()'))\n                author = ', '.join(data.xpath('.//div[@class=\"information\"]//div[@class=\"authors\"]/a/text()'))\n                formats = [form.strip() for form in data.xpath('.//div[@class=\"information\"]//div[@class=\"format\"]/a/text()')]\n                nodrm = no_drm_pattern.search(''.join(data.xpath('.//div[@class=\"protection\"]/text()')))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub('\\.',',',price.strip())\n                s.detail_item = 'http://virtualo.pl' + id.strip().split('http://')[0]\n                s.formats = ', '.join(formats).upper()\n                s.drm = SearchResult.DRM_UNLOCKED if nodrm else SearchResult.DRM_LOCKED\n\n                yield s\n", 
  "amazon_it": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.it/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'di'\nKINDLE_EDITION = 'Formato Kindle'\nDETAILS_URL = 'http://amazon.it/dp/'\nSTORE_LINK =  'http://www.amazon.it'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_es": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 12  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'http://www.amazon.es/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Versi\u00f3n Kindle'\nDETAILS_URL = 'http://amazon.es/dp/'\nSTORE_LINK =  'http://www.amazon.es'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = '(.//span[contains(@class, \" s-price \")])[last()]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n"
}